/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import accesobj.Actor;
import accesobj.Category;
import acessdata.DataMan;
import acessdata.CategoryDAO;

import java.util.List;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
/**
 *
 * @author prakxo
 */
public class CatEd extends javax.swing.JFrame {
    private final static SimpleDateFormat LAST_UPDATED_STRING_FORMAT = new SimpleDateFormat("dd/MM/yyyy");
    private DeleteCatUI delete;
    private InsertCatUI insert;
    private UpdateCatUI update;
    
    
    /**
     * Creates new form CatEd
     */
    public CatEd() {
        try {
        initComponents();
        
        loadCategoryData();
        
        this.categoryList.setCellSelectionEnabled(false);
        this.categoryList.setRowSelectionAllowed(false);
        this.categoryList.setColumnSelectionAllowed(false);
        } catch (SQLException e) {
            System.out.println("Error ... " + e.getMessage() + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        categoryList = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        reloadButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();

        setTitle("Category Editor");
        setAlwaysOnTop(true);

        categoryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Name", "Timestamp"
            }
        ));
        jScrollPane1.setViewportView(categoryList);

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonEv(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonEv(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonEv(evt);
            }
        });

        nameLabel.setText("Name");

        reloadButton.setText("Reload");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonreloadEv(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonEv(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reloadButton)
                                .addGap(18, 18, 18)
                                .addComponent(insertButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(deleteButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nameLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(searchButton)))))
                        .addGap(15, 15, 15)
                        .addComponent(updateButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reloadButton)
                    .addComponent(updateButton)
                    .addComponent(insertButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonEv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonEv
        if(insert == null){
            insert = new InsertCatUI();
        }

        CatEd cat = this;

        cat.setEnabled(false);

        insert.addWindowListener(new WindowListener() {
            @Override
            public void windowClosing(WindowEvent ev) {

            }
            @Override
            public void windowOpened(WindowEvent ev) {
            }

            @Override
            public void windowClosed(WindowEvent ev) {
                cat.setEnabled(true);
            }

            @Override
            public void windowIconified(WindowEvent ev) {

            }

            @Override
            public void windowDeiconified(WindowEvent ev) {

            }

            @Override
            public void windowActivated(WindowEvent ev) {

            }

            @Override
            public void windowDeactivated(WindowEvent ev) {

            }

        });

        insert.setVisible(true);

    }//GEN-LAST:event_insertButtonEv

    private void deleteButtonEv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonEv
        if(delete == null){
            delete = new DeleteCatUI();
        }

        CatEd actor = this;

        actor.setEnabled(false);

        delete.addWindowListener(new WindowListener() {
            @Override
            public void windowClosing(WindowEvent ev) {

            }
            @Override
            public void windowOpened(WindowEvent ev) {
            }

            @Override
            public void windowClosed(WindowEvent ev) {
                actor.setEnabled(true);
            }

            @Override
            public void windowIconified(WindowEvent ev) {

            }

            @Override
            public void windowDeiconified(WindowEvent ev) {

            }

            @Override
            public void windowActivated(WindowEvent ev) {

            }

            @Override
            public void windowDeactivated(WindowEvent ev) {

            }

        });

        delete.setVisible(true);
    }//GEN-LAST:event_deleteButtonEv

    private void searchButtonEv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonEv
        String name = DataMan.getInstance().getNonNULLStr(this.nameField.getText());

        try{
            loadCategoryBySearch(name);
        }
        catch(SQLException e){
            System.out.println("Error ... " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_searchButtonEv

    private void reloadButtonreloadEv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonreloadEv
        DefaultTableModel table = new NotEditableTableModel();
        this.categoryList.setModel(table);

        try {
            loadCategoryData();
        } catch (SQLException e) {
            System.out.println("Error ... " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_reloadButtonreloadEv

    private void updateButtonEv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonEv
        if(update == null){
            update = new UpdateCatUI();
        }

        CatEd actor = this;

        actor.setEnabled(false);

        update.addWindowListener(new WindowListener() {
            @Override
            public void windowClosing(WindowEvent ev) {

            }
            @Override
            public void windowOpened(WindowEvent ev) {
            }

            @Override
            public void windowClosed(WindowEvent ev) {
                actor.setEnabled(true);
            }

            @Override
            public void windowIconified(WindowEvent ev) {

            }

            @Override
            public void windowDeiconified(WindowEvent ev) {

            }

            @Override
            public void windowActivated(WindowEvent ev) {

            }

            @Override
            public void windowDeactivated(WindowEvent ev) {

            }

        });

        update.setVisible(true);
    }//GEN-LAST:event_updateButtonEv


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable categoryList;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    
    private void loadCategoryBySearch(String name) throws SQLException {
        Object tableRowCont[] = new Object[3];
        
        Category cat = DataMan.getInstance().loadCategoryByName(name);
        
        DefaultTableModel table = new NotEditableTableModel();
        
        table.addColumn("Id");
        table.addColumn("Name");
        table.addColumn("Timestamp");
        
        if(cat != null){
            tableRowCont[0] = cat.getId();
            tableRowCont[1] = cat.getName();
            tableRowCont[2] = LAST_UPDATED_STRING_FORMAT.format(cat.getLastUpdate());

            table.addRow(tableRowCont);
        }
        this.categoryList.setModel(table);
        
    }


    private void loadCategoryData() throws SQLException {
        Object[] tableRowCont = new Object[3];
        int i;
        List<Category> list = DataMan.getInstance().loadAllCategories();
        
        DefaultTableModel table = new NotEditableTableModel();
        
        table.addColumn("Id");
        table.addColumn("Name");
        table.addColumn("Last Update");
        
        for(i = 0; i < list.size(); i++){
            Category current = list.get(i);
            
            tableRowCont[0] = current.getId();
            tableRowCont[1] = current.getName();
            tableRowCont[2] = LAST_UPDATED_STRING_FORMAT.format(current.getLastUpdate());
            
            table.addRow(tableRowCont);
        }
        
        this.categoryList.setModel(table);

    }
}
